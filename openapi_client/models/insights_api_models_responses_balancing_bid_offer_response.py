# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class InsightsApiModelsResponsesBalancingBidOfferResponse(BaseModel):
    """
    InsightsApiModelsResponsesBalancingBidOfferResponse
    """
    settlement_date: Optional[date] = Field(None, alias="settlementDate")
    settlement_period: Optional[StrictInt] = Field(None, alias="settlementPeriod")
    national_grid_bm_unit: Optional[StrictStr] = Field(None, alias="nationalGridBmUnit")
    bm_unit: Optional[StrictStr] = Field(None, alias="bmUnit")
    time_from: Optional[datetime] = Field(None, alias="timeFrom")
    time_to: Optional[datetime] = Field(None, alias="timeTo")
    level_from: Optional[StrictInt] = Field(None, alias="levelFrom")
    level_to: Optional[StrictInt] = Field(None, alias="levelTo")
    bid: Optional[Union[StrictFloat, StrictInt]] = None
    offer: Optional[Union[StrictFloat, StrictInt]] = None
    pair_id: Optional[StrictInt] = Field(None, alias="pairId")
    __properties = ["settlementDate", "settlementPeriod", "nationalGridBmUnit", "bmUnit", "timeFrom", "timeTo", "levelFrom", "levelTo", "bid", "offer", "pairId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InsightsApiModelsResponsesBalancingBidOfferResponse:
        """Create an instance of InsightsApiModelsResponsesBalancingBidOfferResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if national_grid_bm_unit (nullable) is None
        # and __fields_set__ contains the field
        if self.national_grid_bm_unit is None and "national_grid_bm_unit" in self.__fields_set__:
            _dict['nationalGridBmUnit'] = None

        # set to None if bm_unit (nullable) is None
        # and __fields_set__ contains the field
        if self.bm_unit is None and "bm_unit" in self.__fields_set__:
            _dict['bmUnit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InsightsApiModelsResponsesBalancingBidOfferResponse:
        """Create an instance of InsightsApiModelsResponsesBalancingBidOfferResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InsightsApiModelsResponsesBalancingBidOfferResponse.parse_obj(obj)

        _obj = InsightsApiModelsResponsesBalancingBidOfferResponse.parse_obj({
            "settlement_date": obj.get("settlementDate"),
            "settlement_period": obj.get("settlementPeriod"),
            "national_grid_bm_unit": obj.get("nationalGridBmUnit"),
            "bm_unit": obj.get("bmUnit"),
            "time_from": obj.get("timeFrom"),
            "time_to": obj.get("timeTo"),
            "level_from": obj.get("levelFrom"),
            "level_to": obj.get("levelTo"),
            "bid": obj.get("bid"),
            "offer": obj.get("offer"),
            "pair_id": obj.get("pairId")
        })
        return _obj


