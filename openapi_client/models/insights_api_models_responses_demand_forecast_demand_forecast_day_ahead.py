# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead(BaseModel):
    """
    InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead
    """
    publish_time: Optional[datetime] = Field(None, alias="publishTime")
    transmission_system_demand: Optional[StrictInt] = Field(None, alias="transmissionSystemDemand")
    national_demand: Optional[StrictInt] = Field(None, alias="nationalDemand")
    start_time: Optional[datetime] = Field(None, alias="startTime")
    settlement_date: Optional[date] = Field(None, alias="settlementDate")
    settlement_period: Optional[StrictInt] = Field(None, alias="settlementPeriod")
    boundary: Optional[StrictStr] = None
    __properties = ["publishTime", "transmissionSystemDemand", "nationalDemand", "startTime", "settlementDate", "settlementPeriod", "boundary"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead:
        """Create an instance of InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if publish_time (nullable) is None
        # and __fields_set__ contains the field
        if self.publish_time is None and "publish_time" in self.__fields_set__:
            _dict['publishTime'] = None

        # set to None if national_demand (nullable) is None
        # and __fields_set__ contains the field
        if self.national_demand is None and "national_demand" in self.__fields_set__:
            _dict['nationalDemand'] = None

        # set to None if boundary (nullable) is None
        # and __fields_set__ contains the field
        if self.boundary is None and "boundary" in self.__fields_set__:
            _dict['boundary'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead:
        """Create an instance of InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead.parse_obj(obj)

        _obj = InsightsApiModelsResponsesDemandForecastDemandForecastDayAhead.parse_obj({
            "publish_time": obj.get("publishTime"),
            "transmission_system_demand": obj.get("transmissionSystemDemand"),
            "national_demand": obj.get("nationalDemand"),
            "start_time": obj.get("startTime"),
            "settlement_date": obj.get("settlementDate"),
            "settlement_period": obj.get("settlementPeriod"),
            "boundary": obj.get("boundary")
        })
        return _obj


