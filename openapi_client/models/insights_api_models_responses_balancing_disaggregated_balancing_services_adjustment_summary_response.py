# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse(BaseModel):
    """
    InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse
    """
    settlement_date: Optional[date] = Field(None, alias="settlementDate")
    settlement_period: Optional[StrictInt] = Field(None, alias="settlementPeriod")
    start_time: Optional[datetime] = Field(None, alias="startTime")
    buy_action_count: Optional[StrictInt] = Field(None, alias="buyActionCount")
    sell_action_count: Optional[StrictInt] = Field(None, alias="sellActionCount")
    buy_price_minimum: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="buyPriceMinimum")
    buy_price_maximum: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="buyPriceMaximum")
    buy_price_average: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="buyPriceAverage")
    sell_price_minimum: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="sellPriceMinimum")
    sell_price_maximum: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="sellPriceMaximum")
    sell_price_average: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="sellPriceAverage")
    buy_volume_total: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="buyVolumeTotal")
    sell_volume_total: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="sellVolumeTotal")
    net_volume: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="netVolume")
    __properties = ["settlementDate", "settlementPeriod", "startTime", "buyActionCount", "sellActionCount", "buyPriceMinimum", "buyPriceMaximum", "buyPriceAverage", "sellPriceMinimum", "sellPriceMaximum", "sellPriceAverage", "buyVolumeTotal", "sellVolumeTotal", "netVolume"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse:
        """Create an instance of InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if buy_price_minimum (nullable) is None
        # and __fields_set__ contains the field
        if self.buy_price_minimum is None and "buy_price_minimum" in self.__fields_set__:
            _dict['buyPriceMinimum'] = None

        # set to None if buy_price_maximum (nullable) is None
        # and __fields_set__ contains the field
        if self.buy_price_maximum is None and "buy_price_maximum" in self.__fields_set__:
            _dict['buyPriceMaximum'] = None

        # set to None if buy_price_average (nullable) is None
        # and __fields_set__ contains the field
        if self.buy_price_average is None and "buy_price_average" in self.__fields_set__:
            _dict['buyPriceAverage'] = None

        # set to None if sell_price_minimum (nullable) is None
        # and __fields_set__ contains the field
        if self.sell_price_minimum is None and "sell_price_minimum" in self.__fields_set__:
            _dict['sellPriceMinimum'] = None

        # set to None if sell_price_maximum (nullable) is None
        # and __fields_set__ contains the field
        if self.sell_price_maximum is None and "sell_price_maximum" in self.__fields_set__:
            _dict['sellPriceMaximum'] = None

        # set to None if sell_price_average (nullable) is None
        # and __fields_set__ contains the field
        if self.sell_price_average is None and "sell_price_average" in self.__fields_set__:
            _dict['sellPriceAverage'] = None

        # set to None if buy_volume_total (nullable) is None
        # and __fields_set__ contains the field
        if self.buy_volume_total is None and "buy_volume_total" in self.__fields_set__:
            _dict['buyVolumeTotal'] = None

        # set to None if sell_volume_total (nullable) is None
        # and __fields_set__ contains the field
        if self.sell_volume_total is None and "sell_volume_total" in self.__fields_set__:
            _dict['sellVolumeTotal'] = None

        # set to None if net_volume (nullable) is None
        # and __fields_set__ contains the field
        if self.net_volume is None and "net_volume" in self.__fields_set__:
            _dict['netVolume'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse:
        """Create an instance of InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.parse_obj(obj)

        _obj = InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse.parse_obj({
            "settlement_date": obj.get("settlementDate"),
            "settlement_period": obj.get("settlementPeriod"),
            "start_time": obj.get("startTime"),
            "buy_action_count": obj.get("buyActionCount"),
            "sell_action_count": obj.get("sellActionCount"),
            "buy_price_minimum": obj.get("buyPriceMinimum"),
            "buy_price_maximum": obj.get("buyPriceMaximum"),
            "buy_price_average": obj.get("buyPriceAverage"),
            "sell_price_minimum": obj.get("sellPriceMinimum"),
            "sell_price_maximum": obj.get("sellPriceMaximum"),
            "sell_price_average": obj.get("sellPriceAverage"),
            "buy_volume_total": obj.get("buyVolumeTotal"),
            "sell_volume_total": obj.get("sellVolumeTotal"),
            "net_volume": obj.get("netVolume")
        })
        return _obj


