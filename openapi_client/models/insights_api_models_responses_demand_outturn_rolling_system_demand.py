# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class InsightsApiModelsResponsesDemandOutturnRollingSystemDemand(BaseModel):
    """
    InsightsApiModelsResponsesDemandOutturnRollingSystemDemand
    """
    record_type: Optional[StrictStr] = Field(None, alias="recordType")
    start_time: Optional[datetime] = Field(None, alias="startTime")
    demand: Optional[StrictInt] = None
    __properties = ["recordType", "startTime", "demand"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InsightsApiModelsResponsesDemandOutturnRollingSystemDemand:
        """Create an instance of InsightsApiModelsResponsesDemandOutturnRollingSystemDemand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if record_type (nullable) is None
        # and __fields_set__ contains the field
        if self.record_type is None and "record_type" in self.__fields_set__:
            _dict['recordType'] = None

        # set to None if start_time (nullable) is None
        # and __fields_set__ contains the field
        if self.start_time is None and "start_time" in self.__fields_set__:
            _dict['startTime'] = None

        # set to None if demand (nullable) is None
        # and __fields_set__ contains the field
        if self.demand is None and "demand" in self.__fields_set__:
            _dict['demand'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InsightsApiModelsResponsesDemandOutturnRollingSystemDemand:
        """Create an instance of InsightsApiModelsResponsesDemandOutturnRollingSystemDemand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InsightsApiModelsResponsesDemandOutturnRollingSystemDemand.parse_obj(obj)

        _obj = InsightsApiModelsResponsesDemandOutturnRollingSystemDemand.parse_obj({
            "record_type": obj.get("recordType"),
            "start_time": obj.get("startTime"),
            "demand": obj.get("demand")
        })
        return _obj


