# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class InsightsApiModelsResponsesReferenceBmUnitData(BaseModel):
    """
    InsightsApiModelsResponsesReferenceBmUnitData
    """
    national_grid_bm_unit: Optional[StrictStr] = Field(None, alias="nationalGridBmUnit")
    elexon_bm_unit: Optional[StrictStr] = Field(None, alias="elexonBmUnit")
    fuel_type: Optional[StrictStr] = Field(None, alias="fuelType")
    lead_party_name: Optional[StrictStr] = Field(None, alias="leadPartyName")
    bm_unit_type: Optional[StrictStr] = Field(None, alias="bmUnitType")
    fpn_flag: Optional[StrictBool] = Field(None, alias="fpnFlag")
    __properties = ["nationalGridBmUnit", "elexonBmUnit", "fuelType", "leadPartyName", "bmUnitType", "fpnFlag"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InsightsApiModelsResponsesReferenceBmUnitData:
        """Create an instance of InsightsApiModelsResponsesReferenceBmUnitData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if national_grid_bm_unit (nullable) is None
        # and __fields_set__ contains the field
        if self.national_grid_bm_unit is None and "national_grid_bm_unit" in self.__fields_set__:
            _dict['nationalGridBmUnit'] = None

        # set to None if elexon_bm_unit (nullable) is None
        # and __fields_set__ contains the field
        if self.elexon_bm_unit is None and "elexon_bm_unit" in self.__fields_set__:
            _dict['elexonBmUnit'] = None

        # set to None if fuel_type (nullable) is None
        # and __fields_set__ contains the field
        if self.fuel_type is None and "fuel_type" in self.__fields_set__:
            _dict['fuelType'] = None

        # set to None if lead_party_name (nullable) is None
        # and __fields_set__ contains the field
        if self.lead_party_name is None and "lead_party_name" in self.__fields_set__:
            _dict['leadPartyName'] = None

        # set to None if bm_unit_type (nullable) is None
        # and __fields_set__ contains the field
        if self.bm_unit_type is None and "bm_unit_type" in self.__fields_set__:
            _dict['bmUnitType'] = None

        # set to None if fpn_flag (nullable) is None
        # and __fields_set__ contains the field
        if self.fpn_flag is None and "fpn_flag" in self.__fields_set__:
            _dict['fpnFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InsightsApiModelsResponsesReferenceBmUnitData:
        """Create an instance of InsightsApiModelsResponsesReferenceBmUnitData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InsightsApiModelsResponsesReferenceBmUnitData.parse_obj(obj)

        _obj = InsightsApiModelsResponsesReferenceBmUnitData.parse_obj({
            "national_grid_bm_unit": obj.get("nationalGridBmUnit"),
            "elexon_bm_unit": obj.get("elexonBmUnit"),
            "fuel_type": obj.get("fuelType"),
            "lead_party_name": obj.get("leadPartyName"),
            "bm_unit_type": obj.get("bmUnitType"),
            "fpn_flag": obj.get("fpnFlag")
        })
        return _obj


