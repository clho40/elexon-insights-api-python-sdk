# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow(BaseModel):
    """
    InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow
    """
    dataset: Optional[StrictStr] = None
    document_id: Optional[StrictStr] = Field(None, alias="documentId")
    document_revision_number: Optional[StrictInt] = Field(None, alias="documentRevisionNumber")
    publish_time: Optional[datetime] = Field(None, alias="publishTime")
    forecast_week_commencing_date: Optional[date] = Field(None, alias="forecastWeekCommencingDate")
    forecast_year: Optional[StrictInt] = Field(None, alias="forecastYear")
    forecast_month: Optional[StrictStr] = Field(None, alias="forecastMonth")
    minimum_possible: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="minimumPossible")
    maximum_available: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="maximumAvailable")
    __properties = ["dataset", "documentId", "documentRevisionNumber", "publishTime", "forecastWeekCommencingDate", "forecastYear", "forecastMonth", "minimumPossible", "maximumAvailable"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow:
        """Create an instance of InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if dataset (nullable) is None
        # and __fields_set__ contains the field
        if self.dataset is None and "dataset" in self.__fields_set__:
            _dict['dataset'] = None

        # set to None if document_id (nullable) is None
        # and __fields_set__ contains the field
        if self.document_id is None and "document_id" in self.__fields_set__:
            _dict['documentId'] = None

        # set to None if forecast_month (nullable) is None
        # and __fields_set__ contains the field
        if self.forecast_month is None and "forecast_month" in self.__fields_set__:
            _dict['forecastMonth'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow:
        """Create an instance of InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow.parse_obj(obj)

        _obj = InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow.parse_obj({
            "dataset": obj.get("dataset"),
            "document_id": obj.get("documentId"),
            "document_revision_number": obj.get("documentRevisionNumber"),
            "publish_time": obj.get("publishTime"),
            "forecast_week_commencing_date": obj.get("forecastWeekCommencingDate"),
            "forecast_year": obj.get("forecastYear"),
            "forecast_month": obj.get("forecastMonth"),
            "minimum_possible": obj.get("minimumPossible"),
            "maximum_available": obj.get("maximumAvailable")
        })
        return _obj


