# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class InsightsApiModelsResponsesMiscDatasetRowsDemandControlInstructionDatasetRow(BaseModel):
    """
    InsightsApiModelsResponsesMiscDatasetRowsDemandControlInstructionDatasetRow
    """
    dataset: Optional[StrictStr] = None
    m_rid: Optional[StrictStr] = Field(None, alias="mRID")
    revision_number: Optional[StrictInt] = Field(None, alias="revisionNumber")
    publish_time: Optional[datetime] = Field(None, alias="publishTime")
    publishing_period_commencing_time: Optional[datetime] = Field(None, alias="publishingPeriodCommencingTime")
    affected_dso: Optional[StrictStr] = Field(None, alias="affectedDso")
    demand_control_id: Optional[StrictStr] = Field(None, alias="demandControlId")
    instruction_sequence: Optional[StrictInt] = Field(None, alias="instructionSequence")
    demand_control_event_flag: Optional[StrictStr] = Field(None, alias="demandControlEventFlag")
    time_from: Optional[datetime] = Field(None, alias="timeFrom")
    time_to: Optional[datetime] = Field(None, alias="timeTo")
    volume: Optional[Union[StrictFloat, StrictInt]] = None
    system_management_action_flag: Optional[StrictStr] = Field(None, alias="systemManagementActionFlag")
    amendment_flag: Optional[StrictStr] = Field(None, alias="amendmentFlag")
    __properties = ["dataset", "mRID", "revisionNumber", "publishTime", "publishingPeriodCommencingTime", "affectedDso", "demandControlId", "instructionSequence", "demandControlEventFlag", "timeFrom", "timeTo", "volume", "systemManagementActionFlag", "amendmentFlag"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InsightsApiModelsResponsesMiscDatasetRowsDemandControlInstructionDatasetRow:
        """Create an instance of InsightsApiModelsResponsesMiscDatasetRowsDemandControlInstructionDatasetRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if dataset (nullable) is None
        # and __fields_set__ contains the field
        if self.dataset is None and "dataset" in self.__fields_set__:
            _dict['dataset'] = None

        # set to None if m_rid (nullable) is None
        # and __fields_set__ contains the field
        if self.m_rid is None and "m_rid" in self.__fields_set__:
            _dict['mRID'] = None

        # set to None if publish_time (nullable) is None
        # and __fields_set__ contains the field
        if self.publish_time is None and "publish_time" in self.__fields_set__:
            _dict['publishTime'] = None

        # set to None if affected_dso (nullable) is None
        # and __fields_set__ contains the field
        if self.affected_dso is None and "affected_dso" in self.__fields_set__:
            _dict['affectedDso'] = None

        # set to None if demand_control_id (nullable) is None
        # and __fields_set__ contains the field
        if self.demand_control_id is None and "demand_control_id" in self.__fields_set__:
            _dict['demandControlId'] = None

        # set to None if time_to (nullable) is None
        # and __fields_set__ contains the field
        if self.time_to is None and "time_to" in self.__fields_set__:
            _dict['timeTo'] = None

        # set to None if system_management_action_flag (nullable) is None
        # and __fields_set__ contains the field
        if self.system_management_action_flag is None and "system_management_action_flag" in self.__fields_set__:
            _dict['systemManagementActionFlag'] = None

        # set to None if amendment_flag (nullable) is None
        # and __fields_set__ contains the field
        if self.amendment_flag is None and "amendment_flag" in self.__fields_set__:
            _dict['amendmentFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InsightsApiModelsResponsesMiscDatasetRowsDemandControlInstructionDatasetRow:
        """Create an instance of InsightsApiModelsResponsesMiscDatasetRowsDemandControlInstructionDatasetRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InsightsApiModelsResponsesMiscDatasetRowsDemandControlInstructionDatasetRow.parse_obj(obj)

        _obj = InsightsApiModelsResponsesMiscDatasetRowsDemandControlInstructionDatasetRow.parse_obj({
            "dataset": obj.get("dataset"),
            "m_rid": obj.get("mRID"),
            "revision_number": obj.get("revisionNumber"),
            "publish_time": obj.get("publishTime"),
            "publishing_period_commencing_time": obj.get("publishingPeriodCommencingTime"),
            "affected_dso": obj.get("affectedDso"),
            "demand_control_id": obj.get("demandControlId"),
            "instruction_sequence": obj.get("instructionSequence"),
            "demand_control_event_flag": obj.get("demandControlEventFlag"),
            "time_from": obj.get("timeFrom"),
            "time_to": obj.get("timeTo"),
            "volume": obj.get("volume"),
            "system_management_action_flag": obj.get("systemManagementActionFlag"),
            "amendment_flag": obj.get("amendmentFlag")
        })
        return _obj


