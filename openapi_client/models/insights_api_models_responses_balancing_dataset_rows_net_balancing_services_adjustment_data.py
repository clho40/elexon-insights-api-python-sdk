# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData(BaseModel):
    """
    InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData
    """
    dataset: Optional[StrictStr] = None
    settlement_date: Optional[date] = Field(None, alias="settlementDate")
    settlement_period: Optional[StrictInt] = Field(None, alias="settlementPeriod")
    net_buy_price_cost_adjustment_energy: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="netBuyPriceCostAdjustmentEnergy")
    net_buy_price_volume_adjustment_energy: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="netBuyPriceVolumeAdjustmentEnergy")
    net_buy_price_volume_adjustment_system: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="netBuyPriceVolumeAdjustmentSystem")
    buy_price_price_adjustment: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="buyPricePriceAdjustment")
    net_sell_price_cost_adjustment_energy: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="netSellPriceCostAdjustmentEnergy")
    net_sell_price_volume_adjustment_energy: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="netSellPriceVolumeAdjustmentEnergy")
    net_sell_price_volume_adjustment_system: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="netSellPriceVolumeAdjustmentSystem")
    sell_price_price_adjustment: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="sellPricePriceAdjustment")
    __properties = ["dataset", "settlementDate", "settlementPeriod", "netBuyPriceCostAdjustmentEnergy", "netBuyPriceVolumeAdjustmentEnergy", "netBuyPriceVolumeAdjustmentSystem", "buyPricePriceAdjustment", "netSellPriceCostAdjustmentEnergy", "netSellPriceVolumeAdjustmentEnergy", "netSellPriceVolumeAdjustmentSystem", "sellPricePriceAdjustment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData:
        """Create an instance of InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if dataset (nullable) is None
        # and __fields_set__ contains the field
        if self.dataset is None and "dataset" in self.__fields_set__:
            _dict['dataset'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData:
        """Create an instance of InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.parse_obj(obj)

        _obj = InsightsApiModelsResponsesBalancingDatasetRowsNetBalancingServicesAdjustmentData.parse_obj({
            "dataset": obj.get("dataset"),
            "settlement_date": obj.get("settlementDate"),
            "settlement_period": obj.get("settlementPeriod"),
            "net_buy_price_cost_adjustment_energy": obj.get("netBuyPriceCostAdjustmentEnergy"),
            "net_buy_price_volume_adjustment_energy": obj.get("netBuyPriceVolumeAdjustmentEnergy"),
            "net_buy_price_volume_adjustment_system": obj.get("netBuyPriceVolumeAdjustmentSystem"),
            "buy_price_price_adjustment": obj.get("buyPricePriceAdjustment"),
            "net_sell_price_cost_adjustment_energy": obj.get("netSellPriceCostAdjustmentEnergy"),
            "net_sell_price_volume_adjustment_energy": obj.get("netSellPriceVolumeAdjustmentEnergy"),
            "net_sell_price_volume_adjustment_system": obj.get("netSellPriceVolumeAdjustmentSystem"),
            "sell_price_price_adjustment": obj.get("sellPricePriceAdjustment")
        })
        return _obj


