# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class InsightsApiModelsResponsesTransparencyDayAheadGenerationForWindAndSolar(BaseModel):
    """
    InsightsApiModelsResponsesTransparencyDayAheadGenerationForWindAndSolar
    """
    publish_time: Optional[datetime] = Field(None, alias="publishTime")
    process_type: Optional[StrictStr] = Field(None, alias="processType")
    business_type: Optional[StrictStr] = Field(None, alias="businessType")
    psr_type: Optional[StrictStr] = Field(None, alias="psrType")
    start_time: Optional[datetime] = Field(None, alias="startTime")
    settlement_date: Optional[date] = Field(None, alias="settlementDate")
    settlement_period: Optional[StrictInt] = Field(None, alias="settlementPeriod")
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["publishTime", "processType", "businessType", "psrType", "startTime", "settlementDate", "settlementPeriod", "quantity"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InsightsApiModelsResponsesTransparencyDayAheadGenerationForWindAndSolar:
        """Create an instance of InsightsApiModelsResponsesTransparencyDayAheadGenerationForWindAndSolar from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if process_type (nullable) is None
        # and __fields_set__ contains the field
        if self.process_type is None and "process_type" in self.__fields_set__:
            _dict['processType'] = None

        # set to None if business_type (nullable) is None
        # and __fields_set__ contains the field
        if self.business_type is None and "business_type" in self.__fields_set__:
            _dict['businessType'] = None

        # set to None if psr_type (nullable) is None
        # and __fields_set__ contains the field
        if self.psr_type is None and "psr_type" in self.__fields_set__:
            _dict['psrType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InsightsApiModelsResponsesTransparencyDayAheadGenerationForWindAndSolar:
        """Create an instance of InsightsApiModelsResponsesTransparencyDayAheadGenerationForWindAndSolar from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InsightsApiModelsResponsesTransparencyDayAheadGenerationForWindAndSolar.parse_obj(obj)

        _obj = InsightsApiModelsResponsesTransparencyDayAheadGenerationForWindAndSolar.parse_obj({
            "publish_time": obj.get("publishTime"),
            "process_type": obj.get("processType"),
            "business_type": obj.get("businessType"),
            "psr_type": obj.get("psrType"),
            "start_time": obj.get("startTime"),
            "settlement_date": obj.get("settlementDate"),
            "settlement_period": obj.get("settlementPeriod"),
            "quantity": obj.get("quantity")
        })
        return _obj


