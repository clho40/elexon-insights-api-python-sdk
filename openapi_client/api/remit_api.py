# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist

from typing import List, Optional

from openapi_client.models.insights_api_models_responses_response_with_metadata1_insights_api_models_responses_transparency_remit_remit_message_identifier_with_url import InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl
from openapi_client.models.insights_api_models_responses_response_with_metadata1_insights_api_models_responses_transparency_remit_remit_message_with_id import InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId
from openapi_client.models.insights_api_models_responses_transparency_remit_remit_message_identifier_with_url import InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class RemitApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def r_emit_get(self, message_id : conlist(StrictInt), format : Annotated[Optional[StrictStr], Field(description="Response data format. Use json/xml to include metadata.")] = None, **kwargs) -> InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId:  # noqa: E501
        """Remit bulk data by Message IDs  # noqa: E501

        This endpoint provides one or more REMIT messages based on the given Message IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_get(message_id, format, async_req=True)
        >>> result = thread.get()

        :param message_id: (required)
        :type message_id: List[int]
        :param format: Response data format. Use json/xml to include metadata.
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the r_emit_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.r_emit_get_with_http_info(message_id, format, **kwargs)  # noqa: E501

    @validate_arguments
    def r_emit_get_with_http_info(self, message_id : conlist(StrictInt), format : Annotated[Optional[StrictStr], Field(description="Response data format. Use json/xml to include metadata.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remit bulk data by Message IDs  # noqa: E501

        This endpoint provides one or more REMIT messages based on the given Message IDs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_get_with_http_info(message_id, format, async_req=True)
        >>> result = thread.get()

        :param message_id: (required)
        :type message_id: List[int]
        :param format: Response data format. Use json/xml to include metadata.
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'message_id',
            'format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_emit_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('message_id') is not None:  # noqa: E501
            _query_params.append(('messageId', _params['message_id']))
            _collection_formats['messageId'] = 'multi'

        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId",
            '400': None,
            '404': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/REMIT', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def r_emit_list_by_event_get(self, var_from : datetime, to : datetime, participant_id : Optional[StrictStr] = None, asset_id : Optional[StrictStr] = None, message_type : Optional[StrictStr] = None, unavailability_type : Optional[StrictStr] = None, event_type : Optional[conlist(StrictStr)] = None, fuel_type : Optional[conlist(StrictStr)] = None, latest_revision_only : Optional[StrictBool] = None, profile_only : Optional[StrictBool] = None, format : Annotated[Optional[StrictStr], Field(description="Response data format. Use json/xml to include metadata.")] = None, **kwargs) -> InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl:  # noqa: E501
        """Remit list message identifiers by event  # noqa: E501

        This endpoint provides a list of REMIT message identifiers based on the event start time, end time and other optional parameters.                - Filtering by LatestRevisionOnly (default = true):     if true, include only the latest revision of each message.                - Filtering by ProfileOnly (default = false):      if true, include only messages with an outage profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_list_by_event_get(var_from, to, participant_id, asset_id, message_type, unavailability_type, event_type, fuel_type, latest_revision_only, profile_only, format, async_req=True)
        >>> result = thread.get()

        :param var_from: (required)
        :type var_from: datetime
        :param to: (required)
        :type to: datetime
        :param participant_id:
        :type participant_id: str
        :param asset_id:
        :type asset_id: str
        :param message_type:
        :type message_type: str
        :param unavailability_type:
        :type unavailability_type: str
        :param event_type:
        :type event_type: List[str]
        :param fuel_type:
        :type fuel_type: List[str]
        :param latest_revision_only:
        :type latest_revision_only: bool
        :param profile_only:
        :type profile_only: bool
        :param format: Response data format. Use json/xml to include metadata.
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the r_emit_list_by_event_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.r_emit_list_by_event_get_with_http_info(var_from, to, participant_id, asset_id, message_type, unavailability_type, event_type, fuel_type, latest_revision_only, profile_only, format, **kwargs)  # noqa: E501

    @validate_arguments
    def r_emit_list_by_event_get_with_http_info(self, var_from : datetime, to : datetime, participant_id : Optional[StrictStr] = None, asset_id : Optional[StrictStr] = None, message_type : Optional[StrictStr] = None, unavailability_type : Optional[StrictStr] = None, event_type : Optional[conlist(StrictStr)] = None, fuel_type : Optional[conlist(StrictStr)] = None, latest_revision_only : Optional[StrictBool] = None, profile_only : Optional[StrictBool] = None, format : Annotated[Optional[StrictStr], Field(description="Response data format. Use json/xml to include metadata.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remit list message identifiers by event  # noqa: E501

        This endpoint provides a list of REMIT message identifiers based on the event start time, end time and other optional parameters.                - Filtering by LatestRevisionOnly (default = true):     if true, include only the latest revision of each message.                - Filtering by ProfileOnly (default = false):      if true, include only messages with an outage profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_list_by_event_get_with_http_info(var_from, to, participant_id, asset_id, message_type, unavailability_type, event_type, fuel_type, latest_revision_only, profile_only, format, async_req=True)
        >>> result = thread.get()

        :param var_from: (required)
        :type var_from: datetime
        :param to: (required)
        :type to: datetime
        :param participant_id:
        :type participant_id: str
        :param asset_id:
        :type asset_id: str
        :param message_type:
        :type message_type: str
        :param unavailability_type:
        :type unavailability_type: str
        :param event_type:
        :type event_type: List[str]
        :param fuel_type:
        :type fuel_type: List[str]
        :param latest_revision_only:
        :type latest_revision_only: bool
        :param profile_only:
        :type profile_only: bool
        :param format: Response data format. Use json/xml to include metadata.
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'var_from',
            'to',
            'participant_id',
            'asset_id',
            'message_type',
            'unavailability_type',
            'event_type',
            'fuel_type',
            'latest_revision_only',
            'profile_only',
            'format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_emit_list_by_event_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('var_from') is not None:  # noqa: E501
            if isinstance(_params['var_from'], datetime):
                _query_params.append(('from', _params['var_from'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('from', _params['var_from']))

        if _params.get('to') is not None:  # noqa: E501
            if isinstance(_params['to'], datetime):
                _query_params.append(('to', _params['to'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('to', _params['to']))

        if _params.get('participant_id') is not None:  # noqa: E501
            _query_params.append(('participantId', _params['participant_id']))

        if _params.get('asset_id') is not None:  # noqa: E501
            _query_params.append(('assetId', _params['asset_id']))

        if _params.get('message_type') is not None:  # noqa: E501
            _query_params.append(('messageType', _params['message_type']))

        if _params.get('unavailability_type') is not None:  # noqa: E501
            _query_params.append(('unavailabilityType', _params['unavailability_type']))

        if _params.get('event_type') is not None:  # noqa: E501
            _query_params.append(('eventType', _params['event_type']))
            _collection_formats['eventType'] = 'multi'

        if _params.get('fuel_type') is not None:  # noqa: E501
            _query_params.append(('fuelType', _params['fuel_type']))
            _collection_formats['fuelType'] = 'multi'

        if _params.get('latest_revision_only') is not None:  # noqa: E501
            _query_params.append(('latestRevisionOnly', _params['latest_revision_only']))

        if _params.get('profile_only') is not None:  # noqa: E501
            _query_params.append(('profileOnly', _params['profile_only']))

        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl",
            '400': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/REMIT/list/by-event', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def r_emit_list_by_event_stream_get(self, var_from : datetime, to : datetime, participant_id : Optional[StrictStr] = None, asset_id : Optional[StrictStr] = None, message_type : Optional[StrictStr] = None, unavailability_type : Optional[StrictStr] = None, event_type : Optional[conlist(StrictStr)] = None, fuel_type : Optional[conlist(StrictStr)] = None, latest_revision_only : Optional[StrictBool] = None, profile_only : Optional[StrictBool] = None, **kwargs) -> List[InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl]:  # noqa: E501
        """Remit list message identifiers by event stream  # noqa: E501

        This endpoint provides a list of REMIT message identifiers based on the event start, end time and other optional parameters.                - Filtering by LatestRevisionOnly (default = true):     if true, include only the latest revision of each message.                - Filtering by ProfileOnly (default = false):      if true, include only messages with an outage profile.                This endpoint has an optimised JSON payload and is aimed at frequent requests for the Remit list message identifiers data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_list_by_event_stream_get(var_from, to, participant_id, asset_id, message_type, unavailability_type, event_type, fuel_type, latest_revision_only, profile_only, async_req=True)
        >>> result = thread.get()

        :param var_from: (required)
        :type var_from: datetime
        :param to: (required)
        :type to: datetime
        :param participant_id:
        :type participant_id: str
        :param asset_id:
        :type asset_id: str
        :param message_type:
        :type message_type: str
        :param unavailability_type:
        :type unavailability_type: str
        :param event_type:
        :type event_type: List[str]
        :param fuel_type:
        :type fuel_type: List[str]
        :param latest_revision_only:
        :type latest_revision_only: bool
        :param profile_only:
        :type profile_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the r_emit_list_by_event_stream_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.r_emit_list_by_event_stream_get_with_http_info(var_from, to, participant_id, asset_id, message_type, unavailability_type, event_type, fuel_type, latest_revision_only, profile_only, **kwargs)  # noqa: E501

    @validate_arguments
    def r_emit_list_by_event_stream_get_with_http_info(self, var_from : datetime, to : datetime, participant_id : Optional[StrictStr] = None, asset_id : Optional[StrictStr] = None, message_type : Optional[StrictStr] = None, unavailability_type : Optional[StrictStr] = None, event_type : Optional[conlist(StrictStr)] = None, fuel_type : Optional[conlist(StrictStr)] = None, latest_revision_only : Optional[StrictBool] = None, profile_only : Optional[StrictBool] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remit list message identifiers by event stream  # noqa: E501

        This endpoint provides a list of REMIT message identifiers based on the event start, end time and other optional parameters.                - Filtering by LatestRevisionOnly (default = true):     if true, include only the latest revision of each message.                - Filtering by ProfileOnly (default = false):      if true, include only messages with an outage profile.                This endpoint has an optimised JSON payload and is aimed at frequent requests for the Remit list message identifiers data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_list_by_event_stream_get_with_http_info(var_from, to, participant_id, asset_id, message_type, unavailability_type, event_type, fuel_type, latest_revision_only, profile_only, async_req=True)
        >>> result = thread.get()

        :param var_from: (required)
        :type var_from: datetime
        :param to: (required)
        :type to: datetime
        :param participant_id:
        :type participant_id: str
        :param asset_id:
        :type asset_id: str
        :param message_type:
        :type message_type: str
        :param unavailability_type:
        :type unavailability_type: str
        :param event_type:
        :type event_type: List[str]
        :param fuel_type:
        :type fuel_type: List[str]
        :param latest_revision_only:
        :type latest_revision_only: bool
        :param profile_only:
        :type profile_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'var_from',
            'to',
            'participant_id',
            'asset_id',
            'message_type',
            'unavailability_type',
            'event_type',
            'fuel_type',
            'latest_revision_only',
            'profile_only'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_emit_list_by_event_stream_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('var_from') is not None:  # noqa: E501
            if isinstance(_params['var_from'], datetime):
                _query_params.append(('from', _params['var_from'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('from', _params['var_from']))

        if _params.get('to') is not None:  # noqa: E501
            if isinstance(_params['to'], datetime):
                _query_params.append(('to', _params['to'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('to', _params['to']))

        if _params.get('participant_id') is not None:  # noqa: E501
            _query_params.append(('participantId', _params['participant_id']))

        if _params.get('asset_id') is not None:  # noqa: E501
            _query_params.append(('assetId', _params['asset_id']))

        if _params.get('message_type') is not None:  # noqa: E501
            _query_params.append(('messageType', _params['message_type']))

        if _params.get('unavailability_type') is not None:  # noqa: E501
            _query_params.append(('unavailabilityType', _params['unavailability_type']))

        if _params.get('event_type') is not None:  # noqa: E501
            _query_params.append(('eventType', _params['event_type']))
            _collection_formats['eventType'] = 'multi'

        if _params.get('fuel_type') is not None:  # noqa: E501
            _query_params.append(('fuelType', _params['fuel_type']))
            _collection_formats['fuelType'] = 'multi'

        if _params.get('latest_revision_only') is not None:  # noqa: E501
            _query_params.append(('latestRevisionOnly', _params['latest_revision_only']))

        if _params.get('profile_only') is not None:  # noqa: E501
            _query_params.append(('profileOnly', _params['profile_only']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl]",
            '400': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/REMIT/list/by-event/stream', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def r_emit_list_by_publish_get(self, var_from : datetime, to : datetime, participant_id : Optional[StrictStr] = None, asset_id : Optional[StrictStr] = None, message_type : Optional[StrictStr] = None, unavailability_type : Optional[StrictStr] = None, event_type : Optional[conlist(StrictStr)] = None, fuel_type : Optional[conlist(StrictStr)] = None, latest_revision_only : Optional[StrictBool] = None, profile_only : Optional[StrictBool] = None, format : Annotated[Optional[StrictStr], Field(description="Response data format. Use json/xml to include metadata.")] = None, **kwargs) -> InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl:  # noqa: E501
        """Remit list message identifiers by publish time  # noqa: E501

        This endpoint provides a list of REMIT message identifiers based on the publish time and other optional parameters.                - Filtering by LatestRevisionOnly (default = true):     if true, include only the latest revision of each message.                - Filtering by ProfileOnly (default = false):      if true, include only messages with an outage profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_list_by_publish_get(var_from, to, participant_id, asset_id, message_type, unavailability_type, event_type, fuel_type, latest_revision_only, profile_only, format, async_req=True)
        >>> result = thread.get()

        :param var_from: (required)
        :type var_from: datetime
        :param to: (required)
        :type to: datetime
        :param participant_id:
        :type participant_id: str
        :param asset_id:
        :type asset_id: str
        :param message_type:
        :type message_type: str
        :param unavailability_type:
        :type unavailability_type: str
        :param event_type:
        :type event_type: List[str]
        :param fuel_type:
        :type fuel_type: List[str]
        :param latest_revision_only:
        :type latest_revision_only: bool
        :param profile_only:
        :type profile_only: bool
        :param format: Response data format. Use json/xml to include metadata.
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the r_emit_list_by_publish_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.r_emit_list_by_publish_get_with_http_info(var_from, to, participant_id, asset_id, message_type, unavailability_type, event_type, fuel_type, latest_revision_only, profile_only, format, **kwargs)  # noqa: E501

    @validate_arguments
    def r_emit_list_by_publish_get_with_http_info(self, var_from : datetime, to : datetime, participant_id : Optional[StrictStr] = None, asset_id : Optional[StrictStr] = None, message_type : Optional[StrictStr] = None, unavailability_type : Optional[StrictStr] = None, event_type : Optional[conlist(StrictStr)] = None, fuel_type : Optional[conlist(StrictStr)] = None, latest_revision_only : Optional[StrictBool] = None, profile_only : Optional[StrictBool] = None, format : Annotated[Optional[StrictStr], Field(description="Response data format. Use json/xml to include metadata.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remit list message identifiers by publish time  # noqa: E501

        This endpoint provides a list of REMIT message identifiers based on the publish time and other optional parameters.                - Filtering by LatestRevisionOnly (default = true):     if true, include only the latest revision of each message.                - Filtering by ProfileOnly (default = false):      if true, include only messages with an outage profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_list_by_publish_get_with_http_info(var_from, to, participant_id, asset_id, message_type, unavailability_type, event_type, fuel_type, latest_revision_only, profile_only, format, async_req=True)
        >>> result = thread.get()

        :param var_from: (required)
        :type var_from: datetime
        :param to: (required)
        :type to: datetime
        :param participant_id:
        :type participant_id: str
        :param asset_id:
        :type asset_id: str
        :param message_type:
        :type message_type: str
        :param unavailability_type:
        :type unavailability_type: str
        :param event_type:
        :type event_type: List[str]
        :param fuel_type:
        :type fuel_type: List[str]
        :param latest_revision_only:
        :type latest_revision_only: bool
        :param profile_only:
        :type profile_only: bool
        :param format: Response data format. Use json/xml to include metadata.
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'var_from',
            'to',
            'participant_id',
            'asset_id',
            'message_type',
            'unavailability_type',
            'event_type',
            'fuel_type',
            'latest_revision_only',
            'profile_only',
            'format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_emit_list_by_publish_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('var_from') is not None:  # noqa: E501
            if isinstance(_params['var_from'], datetime):
                _query_params.append(('from', _params['var_from'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('from', _params['var_from']))

        if _params.get('to') is not None:  # noqa: E501
            if isinstance(_params['to'], datetime):
                _query_params.append(('to', _params['to'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('to', _params['to']))

        if _params.get('participant_id') is not None:  # noqa: E501
            _query_params.append(('participantId', _params['participant_id']))

        if _params.get('asset_id') is not None:  # noqa: E501
            _query_params.append(('assetId', _params['asset_id']))

        if _params.get('message_type') is not None:  # noqa: E501
            _query_params.append(('messageType', _params['message_type']))

        if _params.get('unavailability_type') is not None:  # noqa: E501
            _query_params.append(('unavailabilityType', _params['unavailability_type']))

        if _params.get('event_type') is not None:  # noqa: E501
            _query_params.append(('eventType', _params['event_type']))
            _collection_formats['eventType'] = 'multi'

        if _params.get('fuel_type') is not None:  # noqa: E501
            _query_params.append(('fuelType', _params['fuel_type']))
            _collection_formats['fuelType'] = 'multi'

        if _params.get('latest_revision_only') is not None:  # noqa: E501
            _query_params.append(('latestRevisionOnly', _params['latest_revision_only']))

        if _params.get('profile_only') is not None:  # noqa: E501
            _query_params.append(('profileOnly', _params['profile_only']))

        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl",
            '400': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/REMIT/list/by-publish', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def r_emit_list_by_publish_stream_get(self, var_from : datetime, to : datetime, participant_id : Optional[StrictStr] = None, asset_id : Optional[StrictStr] = None, message_type : Optional[StrictStr] = None, unavailability_type : Optional[StrictStr] = None, event_type : Optional[conlist(StrictStr)] = None, fuel_type : Optional[conlist(StrictStr)] = None, latest_revision_only : Optional[StrictBool] = None, profile_only : Optional[StrictBool] = None, **kwargs) -> List[InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl]:  # noqa: E501
        """Remit list message identifiers by publish time stream  # noqa: E501

        This endpoint provides a list of REMIT message identifiers based on the publish time and other optional parameters.                - Filtering by LatestRevisionOnly (default = true):     if true, include only the latest revision of each message.                - Filtering by ProfileOnly (default = false):      if true, include only messages with an outage profile.                This endpoint has an optimised JSON payload and is aimed at frequent requests for the Remit list message identifiers data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_list_by_publish_stream_get(var_from, to, participant_id, asset_id, message_type, unavailability_type, event_type, fuel_type, latest_revision_only, profile_only, async_req=True)
        >>> result = thread.get()

        :param var_from: (required)
        :type var_from: datetime
        :param to: (required)
        :type to: datetime
        :param participant_id:
        :type participant_id: str
        :param asset_id:
        :type asset_id: str
        :param message_type:
        :type message_type: str
        :param unavailability_type:
        :type unavailability_type: str
        :param event_type:
        :type event_type: List[str]
        :param fuel_type:
        :type fuel_type: List[str]
        :param latest_revision_only:
        :type latest_revision_only: bool
        :param profile_only:
        :type profile_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the r_emit_list_by_publish_stream_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.r_emit_list_by_publish_stream_get_with_http_info(var_from, to, participant_id, asset_id, message_type, unavailability_type, event_type, fuel_type, latest_revision_only, profile_only, **kwargs)  # noqa: E501

    @validate_arguments
    def r_emit_list_by_publish_stream_get_with_http_info(self, var_from : datetime, to : datetime, participant_id : Optional[StrictStr] = None, asset_id : Optional[StrictStr] = None, message_type : Optional[StrictStr] = None, unavailability_type : Optional[StrictStr] = None, event_type : Optional[conlist(StrictStr)] = None, fuel_type : Optional[conlist(StrictStr)] = None, latest_revision_only : Optional[StrictBool] = None, profile_only : Optional[StrictBool] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remit list message identifiers by publish time stream  # noqa: E501

        This endpoint provides a list of REMIT message identifiers based on the publish time and other optional parameters.                - Filtering by LatestRevisionOnly (default = true):     if true, include only the latest revision of each message.                - Filtering by ProfileOnly (default = false):      if true, include only messages with an outage profile.                This endpoint has an optimised JSON payload and is aimed at frequent requests for the Remit list message identifiers data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_list_by_publish_stream_get_with_http_info(var_from, to, participant_id, asset_id, message_type, unavailability_type, event_type, fuel_type, latest_revision_only, profile_only, async_req=True)
        >>> result = thread.get()

        :param var_from: (required)
        :type var_from: datetime
        :param to: (required)
        :type to: datetime
        :param participant_id:
        :type participant_id: str
        :param asset_id:
        :type asset_id: str
        :param message_type:
        :type message_type: str
        :param unavailability_type:
        :type unavailability_type: str
        :param event_type:
        :type event_type: List[str]
        :param fuel_type:
        :type fuel_type: List[str]
        :param latest_revision_only:
        :type latest_revision_only: bool
        :param profile_only:
        :type profile_only: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'var_from',
            'to',
            'participant_id',
            'asset_id',
            'message_type',
            'unavailability_type',
            'event_type',
            'fuel_type',
            'latest_revision_only',
            'profile_only'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_emit_list_by_publish_stream_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('var_from') is not None:  # noqa: E501
            if isinstance(_params['var_from'], datetime):
                _query_params.append(('from', _params['var_from'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('from', _params['var_from']))

        if _params.get('to') is not None:  # noqa: E501
            if isinstance(_params['to'], datetime):
                _query_params.append(('to', _params['to'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('to', _params['to']))

        if _params.get('participant_id') is not None:  # noqa: E501
            _query_params.append(('participantId', _params['participant_id']))

        if _params.get('asset_id') is not None:  # noqa: E501
            _query_params.append(('assetId', _params['asset_id']))

        if _params.get('message_type') is not None:  # noqa: E501
            _query_params.append(('messageType', _params['message_type']))

        if _params.get('unavailability_type') is not None:  # noqa: E501
            _query_params.append(('unavailabilityType', _params['unavailability_type']))

        if _params.get('event_type') is not None:  # noqa: E501
            _query_params.append(('eventType', _params['event_type']))
            _collection_formats['eventType'] = 'multi'

        if _params.get('fuel_type') is not None:  # noqa: E501
            _query_params.append(('fuelType', _params['fuel_type']))
            _collection_formats['fuelType'] = 'multi'

        if _params.get('latest_revision_only') is not None:  # noqa: E501
            _query_params.append(('latestRevisionOnly', _params['latest_revision_only']))

        if _params.get('profile_only') is not None:  # noqa: E501
            _query_params.append(('profileOnly', _params['profile_only']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl]",
            '400': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/REMIT/list/by-publish/stream', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def r_emit_message_id_get(self, message_id : StrictInt, format : Annotated[Optional[StrictStr], Field(description="Response data format. Use json/xml to include metadata.")] = None, **kwargs) -> InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId:  # noqa: E501
        """Remit data by Message ID  # noqa: E501

        This endpoint provides a REMIT message based on a given Message ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_message_id_get(message_id, format, async_req=True)
        >>> result = thread.get()

        :param message_id: (required)
        :type message_id: int
        :param format: Response data format. Use json/xml to include metadata.
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the r_emit_message_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.r_emit_message_id_get_with_http_info(message_id, format, **kwargs)  # noqa: E501

    @validate_arguments
    def r_emit_message_id_get_with_http_info(self, message_id : StrictInt, format : Annotated[Optional[StrictStr], Field(description="Response data format. Use json/xml to include metadata.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remit data by Message ID  # noqa: E501

        This endpoint provides a REMIT message based on a given Message ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_message_id_get_with_http_info(message_id, format, async_req=True)
        >>> result = thread.get()

        :param message_id: (required)
        :type message_id: int
        :param format: Response data format. Use json/xml to include metadata.
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'message_id',
            'format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_emit_message_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['message_id']:
            _path_params['messageId'] = _params['message_id']


        # process the query parameters
        _query_params = []
        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId",
            '400': None,
            '404': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/REMIT/{messageId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def r_emit_revisions_get(self, mrid : Optional[StrictStr] = None, message_id : Optional[StrictInt] = None, format : Annotated[Optional[StrictStr], Field(description="Response data format. Use json/xml to include metadata.")] = None, **kwargs) -> InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl:  # noqa: E501
        """Remit message revisions by MRID or Message ID  # noqa: E501

        This endpoint provides all of the REMIT Message Revisions for a given Message Group.  The Message Group can be specified in two ways:  - via an MRID which specifies a unique Message Group  - via a Message ID, as each Message will belong to a unique Message Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_revisions_get(mrid, message_id, format, async_req=True)
        >>> result = thread.get()

        :param mrid:
        :type mrid: str
        :param message_id:
        :type message_id: int
        :param format: Response data format. Use json/xml to include metadata.
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the r_emit_revisions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.r_emit_revisions_get_with_http_info(mrid, message_id, format, **kwargs)  # noqa: E501

    @validate_arguments
    def r_emit_revisions_get_with_http_info(self, mrid : Optional[StrictStr] = None, message_id : Optional[StrictInt] = None, format : Annotated[Optional[StrictStr], Field(description="Response data format. Use json/xml to include metadata.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remit message revisions by MRID or Message ID  # noqa: E501

        This endpoint provides all of the REMIT Message Revisions for a given Message Group.  The Message Group can be specified in two ways:  - via an MRID which specifies a unique Message Group  - via a Message ID, as each Message will belong to a unique Message Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_revisions_get_with_http_info(mrid, message_id, format, async_req=True)
        >>> result = thread.get()

        :param mrid:
        :type mrid: str
        :param message_id:
        :type message_id: int
        :param format: Response data format. Use json/xml to include metadata.
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'mrid',
            'message_id',
            'format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_emit_revisions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('mrid') is not None:  # noqa: E501
            _query_params.append(('mrid', _params['mrid']))

        if _params.get('message_id') is not None:  # noqa: E501
            _query_params.append(('messageId', _params['message_id']))

        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageIdentifierWithUrl",
            '400': None,
            '404': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/REMIT/revisions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def r_emit_search_get(self, mrid : StrictStr, revision_number : Optional[StrictInt] = None, format : Annotated[Optional[StrictStr], Field(description="Response data format. Use json/xml to include metadata.")] = None, **kwargs) -> InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId:  # noqa: E501
        """Remit data by MRID  # noqa: E501

        This endpoint provides one or more REMIT messages based on the given MRID and revision number. If none is given  it returns the REMIT message with the latest revision number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_search_get(mrid, revision_number, format, async_req=True)
        >>> result = thread.get()

        :param mrid: (required)
        :type mrid: str
        :param revision_number:
        :type revision_number: int
        :param format: Response data format. Use json/xml to include metadata.
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the r_emit_search_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.r_emit_search_get_with_http_info(mrid, revision_number, format, **kwargs)  # noqa: E501

    @validate_arguments
    def r_emit_search_get_with_http_info(self, mrid : StrictStr, revision_number : Optional[StrictInt] = None, format : Annotated[Optional[StrictStr], Field(description="Response data format. Use json/xml to include metadata.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Remit data by MRID  # noqa: E501

        This endpoint provides one or more REMIT messages based on the given MRID and revision number. If none is given  it returns the REMIT message with the latest revision number.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.r_emit_search_get_with_http_info(mrid, revision_number, format, async_req=True)
        >>> result = thread.get()

        :param mrid: (required)
        :type mrid: str
        :param revision_number:
        :type revision_number: int
        :param format: Response data format. Use json/xml to include metadata.
        :type format: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'mrid',
            'revision_number',
            'format'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method r_emit_search_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('mrid') is not None:  # noqa: E501
            _query_params.append(('mrid', _params['mrid']))

        if _params.get('revision_number') is not None:  # noqa: E501
            _query_params.append(('revisionNumber', _params['revision_number']))

        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId",
            '400': None,
            '404': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/REMIT/search', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
