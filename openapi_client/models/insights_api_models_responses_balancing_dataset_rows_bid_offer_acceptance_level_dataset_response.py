# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse(BaseModel):
    """
    InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse
    """
    dataset: Optional[StrictStr] = None
    settlement_date: Optional[date] = Field(None, alias="settlementDate")
    settlement_period_from: Optional[StrictInt] = Field(None, alias="settlementPeriodFrom")
    settlement_period_to: Optional[StrictInt] = Field(None, alias="settlementPeriodTo")
    time_from: Optional[datetime] = Field(None, alias="timeFrom")
    time_to: Optional[datetime] = Field(None, alias="timeTo")
    level_from: Optional[StrictInt] = Field(None, alias="levelFrom")
    level_to: Optional[StrictInt] = Field(None, alias="levelTo")
    acceptance_number: Optional[StrictInt] = Field(None, alias="acceptanceNumber")
    acceptance_time: Optional[datetime] = Field(None, alias="acceptanceTime")
    deemed_bo_flag: Optional[StrictBool] = Field(None, alias="deemedBoFlag")
    so_flag: Optional[StrictBool] = Field(None, alias="soFlag")
    amendment_flag: Optional[StrictStr] = Field(None, alias="amendmentFlag")
    stor_flag: Optional[StrictBool] = Field(None, alias="storFlag")
    rr_flag: Optional[StrictBool] = Field(None, alias="rrFlag")
    national_grid_bm_unit: Optional[StrictStr] = Field(None, alias="nationalGridBmUnit")
    bm_unit: Optional[StrictStr] = Field(None, alias="bmUnit")
    __properties = ["dataset", "settlementDate", "settlementPeriodFrom", "settlementPeriodTo", "timeFrom", "timeTo", "levelFrom", "levelTo", "acceptanceNumber", "acceptanceTime", "deemedBoFlag", "soFlag", "amendmentFlag", "storFlag", "rrFlag", "nationalGridBmUnit", "bmUnit"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse:
        """Create an instance of InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if dataset (nullable) is None
        # and __fields_set__ contains the field
        if self.dataset is None and "dataset" in self.__fields_set__:
            _dict['dataset'] = None

        # set to None if amendment_flag (nullable) is None
        # and __fields_set__ contains the field
        if self.amendment_flag is None and "amendment_flag" in self.__fields_set__:
            _dict['amendmentFlag'] = None

        # set to None if national_grid_bm_unit (nullable) is None
        # and __fields_set__ contains the field
        if self.national_grid_bm_unit is None and "national_grid_bm_unit" in self.__fields_set__:
            _dict['nationalGridBmUnit'] = None

        # set to None if bm_unit (nullable) is None
        # and __fields_set__ contains the field
        if self.bm_unit is None and "bm_unit" in self.__fields_set__:
            _dict['bmUnit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse:
        """Create an instance of InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse.parse_obj(obj)

        _obj = InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse.parse_obj({
            "dataset": obj.get("dataset"),
            "settlement_date": obj.get("settlementDate"),
            "settlement_period_from": obj.get("settlementPeriodFrom"),
            "settlement_period_to": obj.get("settlementPeriodTo"),
            "time_from": obj.get("timeFrom"),
            "time_to": obj.get("timeTo"),
            "level_from": obj.get("levelFrom"),
            "level_to": obj.get("levelTo"),
            "acceptance_number": obj.get("acceptanceNumber"),
            "acceptance_time": obj.get("acceptanceTime"),
            "deemed_bo_flag": obj.get("deemedBoFlag"),
            "so_flag": obj.get("soFlag"),
            "amendment_flag": obj.get("amendmentFlag"),
            "stor_flag": obj.get("storFlag"),
            "rr_flag": obj.get("rrFlag"),
            "national_grid_bm_unit": obj.get("nationalGridBmUnit"),
            "bm_unit": obj.get("bmUnit")
        })
        return _obj


