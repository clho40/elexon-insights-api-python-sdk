# coding: utf-8

"""
    Insights.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class InsightsApiModelsResponsesGenerationGenerationByFuelType(BaseModel):
    """
    InsightsApiModelsResponsesGenerationGenerationByFuelType
    """
    dataset: Optional[StrictStr] = None
    fuel_type: Optional[StrictStr] = Field(None, alias="fuelType")
    current_usage: Optional[StrictInt] = Field(None, alias="currentUsage")
    current_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="currentPercentage")
    half_hour_usage: Optional[StrictInt] = Field(None, alias="halfHourUsage")
    half_hour_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="halfHourPercentage")
    twenty_four_hour_usage: Optional[StrictInt] = Field(None, alias="twentyFourHourUsage")
    twenty_four_hour_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="twentyFourHourPercentage")
    __properties = ["dataset", "fuelType", "currentUsage", "currentPercentage", "halfHourUsage", "halfHourPercentage", "twentyFourHourUsage", "twentyFourHourPercentage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InsightsApiModelsResponsesGenerationGenerationByFuelType:
        """Create an instance of InsightsApiModelsResponsesGenerationGenerationByFuelType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "dataset",
                          },
                          exclude_none=True)
        # set to None if dataset (nullable) is None
        # and __fields_set__ contains the field
        if self.dataset is None and "dataset" in self.__fields_set__:
            _dict['dataset'] = None

        # set to None if fuel_type (nullable) is None
        # and __fields_set__ contains the field
        if self.fuel_type is None and "fuel_type" in self.__fields_set__:
            _dict['fuelType'] = None

        # set to None if current_usage (nullable) is None
        # and __fields_set__ contains the field
        if self.current_usage is None and "current_usage" in self.__fields_set__:
            _dict['currentUsage'] = None

        # set to None if half_hour_usage (nullable) is None
        # and __fields_set__ contains the field
        if self.half_hour_usage is None and "half_hour_usage" in self.__fields_set__:
            _dict['halfHourUsage'] = None

        # set to None if twenty_four_hour_usage (nullable) is None
        # and __fields_set__ contains the field
        if self.twenty_four_hour_usage is None and "twenty_four_hour_usage" in self.__fields_set__:
            _dict['twentyFourHourUsage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InsightsApiModelsResponsesGenerationGenerationByFuelType:
        """Create an instance of InsightsApiModelsResponsesGenerationGenerationByFuelType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InsightsApiModelsResponsesGenerationGenerationByFuelType.parse_obj(obj)

        _obj = InsightsApiModelsResponsesGenerationGenerationByFuelType.parse_obj({
            "dataset": obj.get("dataset"),
            "fuel_type": obj.get("fuelType"),
            "current_usage": obj.get("currentUsage"),
            "current_percentage": obj.get("currentPercentage"),
            "half_hour_usage": obj.get("halfHourUsage"),
            "half_hour_percentage": obj.get("halfHourPercentage"),
            "twenty_four_hour_usage": obj.get("twentyFourHourUsage"),
            "twenty_four_hour_percentage": obj.get("twentyFourHourPercentage")
        })
        return _obj


